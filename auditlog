# === H2 file database (persists to disk) ===
spring.datasource.url=jdbc:h2:file:./data/portaldb;DB_CLOSE_DELAY=-1;AUTO_SERVER=TRUE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false

# H2 console (handy on remote)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


************************************************************************************


src/main/java/com/yourco/portal/audit/AuditUserSession.java

package com.yourco.portal.audit;

import jakarta.persistence.*;
import java.time.Instant;

@Entity
@Table(name = "AUDIT_USER_SESSION",
       indexes = {@Index(columnList = "csid"), @Index(columnList = "sessionId")})
public class AuditUserSession {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false, length = 100) private String sessionId;
  @Column(nullable = false, length = 50)  private String csid;

  @Column(nullable = false) private Instant loginAt;
  private Instant logoutAt;

  @Column(length = 64)  private String ip;
  @Column(length = 255) private String userAgent;

  // getters/setters …
}


**************************************************************
src/main/java/com/yourco/portal/audit/AuditAppUsage.java

package com.yourco.portal.audit;

import jakarta.persistence.*;
import java.time.Instant;

@Entity
@Table(name = "AUDIT_APP_USAGE",
       indexes = {@Index(columnList = "csid"), @Index(columnList = "sessionId"), @Index(columnList = "appKey")})
public class AuditAppUsage {
  @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false, length = 100) private String sessionId;
  @Column(nullable = false, length = 50)  private String csid;

  @Column(nullable = false, length = 100) private String appKey; // e.g., change-file, peer-review
  @Column(nullable = false, length = 255) private String path;   // request URI

  @Column(nullable = false) private Instant startedAt;
  private Instant endedAt;

  @Column(length = 30)   private String status;   // SUCCESS/FAIL/CANCELED
  @Column(length = 4000) private String details;  // optional JSON/text

  // getters/setters …
}

*********************************************************

src/main/java/com/yourco/portal/audit/AuditRepos.java

package com.yourco.portal.audit;

import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface AuditUserSessionRepo extends JpaRepository<AuditUserSession, Long> {
  Optional<AuditUserSession> findTopBySessionIdOrderByLoginAtDesc(String sessionId);
}

public interface AuditAppUsageRepo extends JpaRepository<AuditAppUsage, Long> {}

*********************************************************

src/main/java/com/yourco/portal/audit/UserSessionService.java

package com.yourco.portal.audit;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.Instant;

@Service
public class UserSessionService {
  private final AuditUserSessionRepo repo;
  public UserSessionService(AuditUserSessionRepo repo){ this.repo = repo; }

  @Transactional
  public void start(String csid, String sessionId, String ip, String userAgent){
    var s = new AuditUserSession();
    s.setCsid(csid);
    s.setSessionId(sessionId);
    s.setLoginAt(Instant.now());
    s.setIp(ip);
    s.setUserAgent(userAgent);
    repo.save(s);
  }

  @Transactional
  public void end(String sessionId){
    repo.findTopBySessionIdOrderByLoginAtDesc(sessionId).ifPresent(s -> {
      if (s.getLogoutAt() == null) {
        s.setLogoutAt(Instant.now());
        repo.save(s);
      }
    });
  }
}


*************************************************************************

src/main/java/com/yourco/portal/audit/AppUsageService.java

package com.yourco.portal.audit;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.Instant;

@Service
public class AppUsageService {
  private final AuditAppUsageRepo repo;
  public AppUsageService(AuditAppUsageRepo repo){ this.repo = repo; }

  @Transactional
  public Long record(String csid, String sessionId, String appKey, String path,
                     long t0Millis, long t1Millis, String status, String details){
    var u = new AuditAppUsage();
    u.setCsid(csid);
    u.setSessionId(sessionId);
    u.setAppKey(appKey);
    u.setPath(path);
    u.setStartedAt(Instant.ofEpochMilli(t0Millis));
    u.setEndedAt(Instant.ofEpochMilli(t1Millis));
    u.setStatus(status);
    u.setDetails(details);
    return repo.save(u).getId();
  }

  // For long jobs, call start() then end()
  @Transactional
  public Long start(String csid, String sessionId, String appKey, String path){
    var u = new AuditAppUsage();
    u.setCsid(csid);
    u.setSessionId(sessionId);
    u.setAppKey(appKey);
    u.setPath(path);
    u.setStartedAt(Instant.now());
    u = repo.save(u);
    return u.getId();
  }
  @Transactional
  public void end(Long id, String status, String details){
    repo.findById(id).ifPresent(u -> {
      u.setEndedAt(Instant.now());
      u.setStatus(status);
      u.setDetails(details);
      repo.save(u);
    });
  }
}


*********************************************************************

src/main/java/com/yourco/portal/audit/AppKeyResolver.java

package com.yourco.portal.audit;

public final class AppKeyResolver {
  private AppKeyResolver(){}
  public static String resolve(String path){
    if (path.startsWith("/change-file")) return "change-file";
    if (path.startsWith("/peer-review")) return "peer-review";
    if (path.startsWith("/dt-files"))    return "dt-files";
    if (path.startsWith("/ir-compare"))  return "ir-compare";
    // add the rest of your left menu
    return "page";
  }
}


**************************************************************************

src/main/java/com/yourco/portal/audit/AuditInterceptor.java

package com.yourco.portal.audit;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

@Component
public class AuditInterceptor implements HandlerInterceptor {
  private final AppUsageService usage;
  public AuditInterceptor(AppUsageService usage){ this.usage = usage; }

  @Override
  public boolean preHandle(HttpServletRequest req, HttpServletResponse res, Object handler){
    req.setAttribute("t0", System.currentTimeMillis());
    return true;
  }

  @Override
  public void afterCompletion(HttpServletRequest req, HttpServletResponse res, Object handler, Exception ex){
    Object t0 = req.getAttribute("t0");
    if (t0 == null || req.getUserPrincipal() == null) return;

    long t1 = System.currentTimeMillis();
    String csid = req.getUserPrincipal().getName();
    String sessionId = req.getSession().getId();
    String path = req.getRequestURI();
    String appKey = AppKeyResolver.resolve(path);
    String status = (ex == null && res.getStatus() < 400) ? "SUCCESS" : "FAIL";

    usage.record(csid, sessionId, appKey, path, (Long)t0, t1, status, null);
  }
}

************************************************************************

src/main/java/com/yourco/portal/config/WebMvcConfig.java

package com.yourco.portal.config;

import com.yourco.portal.audit.AuditInterceptor;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebMvcConfig implements WebMvcConfigurer {
  private final AuditInterceptor interceptor;
  public WebMvcConfig(AuditInterceptor interceptor){ this.interceptor = interceptor; }

  @Override
  public void addInterceptors(InterceptorRegistry registry) {
    registry.addInterceptor(interceptor)
            .addPathPatterns("/**")
            .excludePathPatterns("/css/**","/js/**","/images/**","/h2-console/**");
  }
}

*****************************************************************************

src/main/java/com/yourco/portal/security/SecurityConfig.java

package com.yourco.portal.security;

import com.yourco.portal.audit.UserSessionService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;

import jakarta.servlet.http.HttpServletRequest;

@Configuration
public class SecurityConfig {

  @Bean
  AuthenticationSuccessHandler authSuccess(UserSessionService sessions){
    return (req, res, auth) -> {
      sessions.start(auth.getName(),
                     req.getSession().getId(),
                     clientIp(req),
                     req.getHeader("User-Agent"));
      res.sendRedirect("/index"); // your landing page
    };
  }

  @Bean
  LogoutSuccessHandler logoutSuccess(UserSessionService sessions){
    return (req, res, auth) -> {
      if (req.getSession(false) != null) {
        sessions.end(req.getSession(false).getId());
      }
      res.sendRedirect("/login?logout");
    };
  }

  private static String clientIp(HttpServletRequest req){
    String xff = req.getHeader("X-Forwarded-For");
    return (xff != null && !xff.isBlank()) ? xff.split(",")[0].trim() : req.getRemoteAddr();
  }

  @Bean
  SecurityFilterChain filterChain(HttpSecurity http,
                                  AuthenticationSuccessHandler successHandler,
                                  LogoutSuccessHandler logoutHandler) throws Exception {
    http
      .authorizeHttpRequests(a -> a
        .requestMatchers("/login","/signup","/h2-console/**","/css/**","/js/**").permitAll()
        .anyRequest().authenticated())
      .formLogin(fl -> fl.loginPage("/login").successHandler(successHandler))
      .logout(lo -> lo.logoutUrl("/logout").logoutSuccessHandler(logoutHandler));

    // H2 console frames
    http.headers(h -> h.frameOptions(f -> f.sameOrigin()));
    return http.build();
  }
}

******************************************************************************

src/main/java/com/yourco/portal/audit/SessionEndedListener.java

package com.yourco.portal.audit;

import org.springframework.context.ApplicationListener;
import org.springframework.security.core.session.SessionDestroyedEvent;
import org.springframework.stereotype.Component;

@Component
public class SessionEndedListener implements ApplicationListener<SessionDestroyedEvent> {
  private final UserSessionService sessions;
  public SessionEndedListener(UserSessionService sessions){ this.sessions = sessions; }

  @Override public void onApplicationEvent(SessionDestroyedEvent event) {
    sessions.end(event.getId());
  }
}


******************************************************************************

src/main/java/com/yourco/portal/audit/MdcFilter.java

package com.yourco.portal.audit;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import org.slf4j.MDC;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;

public class MdcFilter extends OncePerRequestFilter {
  @Override
  protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain chain)
      throws ServletException, IOException {
    try {
      var p = req.getUserPrincipal();
      if (p != null) MDC.put("csid", p.getName());
      MDC.put("sid", req.getSession().getId());
      chain.doFilter(req, res);
    } finally {
      MDC.clear();
    }
  }
}

**********************************************************************

%d %-5level [%X{csid} %X{sid}] %logger - %msg%n

*********************************************************************

@PostMapping("/change-file/compare")
public String compare(@RequestParam(...) ..., Principal principal, HttpSession session) {
  Long usageId = appUsageService.start(principal.getName(), session.getId(),
                                       "change-file", "/change-file/compare");
  try {
    // … your existing logic …
    // add “Generated by” in the output if you like
    // workbook.getProperties().getCoreProperties().setCreator(principal.getName());
    appUsageService.end(usageId, "SUCCESS", "output=ChangeFile_2025-08-07.xlsx");
    return "redirect:/change-file?ok";
  } catch (Exception e){
    appUsageService.end(usageId, "FAIL", e.getClass().getSimpleName()+": "+e.getMessage());
    throw e;
  }
}


***********************************************************************

-- Sessions, with duration seconds
SELECT csid, session_id, login_at, logout_at,
       DATEDIFF('SECOND', login_at, COALESCE(logout_at, CURRENT_TIMESTAMP())) AS seconds_online
FROM AUDIT_USER_SESSION
ORDER BY login_at DESC;

-- Which apps a user used
SELECT csid, app_key, COUNT(*) uses,
       AVG(DATEDIFF('SECOND', started_at, COALESCE(ended_at, CURRENT_TIMESTAMP()))) avg_secs
FROM AUDIT_APP_USAGE
GROUP BY csid, app_key
ORDER BY csid, uses DESC;

-- Last 7 days activity
SELECT * FROM AUDIT_APP_USAGE
WHERE started_at >= DATEADD('DAY', -7, CURRENT_TIMESTAMP())
ORDER BY started_at DESC;

