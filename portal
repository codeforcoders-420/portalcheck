private static String getCellValueAsString(Cell cell) {
    if (cell == null) return "";
    return switch (cell.getCellType()) {
        case STRING -> cell.getStringCellValue();
        case NUMERIC -> String.valueOf((long) cell.getNumericCellValue()); // avoid .0 for whole numbers
        case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
        case FORMULA -> cell.getCellFormula();
        default -> "";
    };
}


*******************************************














import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.stream.*;

public class AspPricingProcessor {

    public static void main(String[] args) throws Exception {
        String folderPath = "C:/users/tfs/54123/CMS";
        List<String> selectedQuarters = Arrays.asList("Q2 2025", "Q3 2025");
        transformDownloadedAspFiles(folderPath, selectedQuarters);
    }

    public static void transformDownloadedAspFiles(String folderPath, List<String> selectedQuarters) throws Exception {
        try (Stream<Path> paths = Files.walk(Paths.get(folderPath))) {
            paths.filter(Files::isRegularFile)
                 .filter(p -> p.toString().endsWith(".xls") || p.toString().endsWith(".xlsx"))
                 .forEach(filePath -> {
                     selectedQuarters.forEach(quarter -> {
                         try {
                             processAspFile(filePath.toFile(), folderPath, quarter);
                         } catch (Exception e) {
                             System.err.println("Failed processing " + filePath + " for " + quarter + ": " + e.getMessage());
                         }
                     });
                 });
        }
    }

    private static void processAspFile(File file, String folderPath, String quarter) throws Exception {
        String effectiveDate = getEffectiveDateFromQuarter(quarter);

        try (InputStream fis = new FileInputStream(file); Workbook workbook = WorkbookFactory.create(fis)) {
            Sheet sheet = workbook.getSheetAt(0);

            int headerRowIdx = StreamSupport.stream(sheet.spliterator(), false)
                .filter(r -> Optional.ofNullable(r.getCell(0))
                                     .map(Cell::getStringCellValue)
                                     .orElse("").contains("HCPCS Code"))
                .map(Row::getRowNum)
                .findFirst()
                .orElse(-1);

            if (headerRowIdx == -1) {
                System.out.println("Skipping file (header not found): " + file.getName());
                return;
            }

            Workbook outWb = new XSSFWorkbook();
            Sheet outSheet = outWb.createSheet("Standard Output");

            Row outHeader = outSheet.createRow(0);
            List<String> headers = List.of("Procedure Code", "Rates", "Effective Date", "Term Date");
            IntStream.range(0, headers.size()).forEach(i -> outHeader.createCell(i).setCellValue(headers.get(i)));

            int outRowNum = 1;
            for (int i = headerRowIdx + 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null || row.getCell(0) == null) continue;

                String code = Optional.ofNullable(row.getCell(0).getStringCellValue()).orElse("").trim();
                if (!code.isEmpty()) {
                    Row outRow = outSheet.createRow(outRowNum++);
                    outRow.createCell(0).setCellValue(code);
                    outRow.createCell(1).setCellValue(getCellValueAsString(row.getCell(2)));
                    outRow.createCell(2).setCellValue(effectiveDate);
                    outRow.createCell(3).setCellValue("12/31/9999");
                }
            }

            String outputName = folderPath + "/" + file.getName().replace(".xls", "").replace(".xlsx", "") + "_" + quarter.replace(" ", "_") + "_Standard.xlsx";
            try (OutputStream os = Files.newOutputStream(Paths.get(outputName))) {
                outWb.write(os);
            }
            outWb.close();
            System.out.println("Created: " + outputName);
        }
    }

    private static String getCellValueAsString(Cell cell) {
        if (cell == null) return "";
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue();
            case NUMERIC -> String.valueOf(cell.getNumericCellValue());
            case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
            default -> "";
        };
    }

    public static String getEffectiveDateFromQuarter(String quarter) {
        String[] parts = quarter.split(" ");
        String q = parts[0];
        String year = parts[1];

        String month = switch (q) {
            case "Q1" -> "01";
            case "Q2" -> "04";
            case "Q3" -> "07";
            case "Q4" -> "10";
            default -> throw new IllegalArgumentException("Unknown quarter: " + q);
        };

        return month + "/01/" + year;
    }
}

***************************************************************












public static void downloadSelectedFiles(String feeSchedule, List<String> quarters) throws Exception {
    WebDriverManager.edgedriver().setup();

    HashMap<String, Object> prefs = new HashMap<>();
    prefs.put("download.default_directory", "C:\\\\users\\\\tfs\\\\54123\\\\CMS");
    prefs.put("profile.default_content_settings.popups", 0);

    EdgeOptions options = new EdgeOptions();
    options.setExperimentalOption("prefs", prefs);

    WebDriver driver = new EdgeDriver(options);
    driver.get("https://www.cms.gov/medicare/payment/fee-for-service-providers/part-b-drugs/average-drug-sales-price");

    driver.findElement(By.linkText("ASP Pricing Files")).click();
    Thread.sleep(2000);

    // âœ… Declare set to track which year sections have already been expanded
    Set<String> expandedYears = new HashSet<>();

    for (String quarter : quarters) {
        String year = getYearFromQuarter(quarter);
        String month = getMonthFromQuarter(quarter);

        // Expand the year section only once
        if (!expandedYears.contains(year)) {
            String sectionXPath = "//button[h3[contains(text(), '" + year + " ASP Drug Pricing')]]";
            WebElement yearButton = driver.findElement(By.xpath(sectionXPath));
            if ("false".equals(yearButton.getAttribute("aria-expanded"))) {
                yearButton.click();
                Thread.sleep(2000);
            }
            expandedYears.add(year);
        }

        // Click the download link
        String linkText = month + " " + year + " ASP Pricing File";
        List<WebElement> links = driver.findElements(By.partialLinkText(linkText));
        if (!links.isEmpty()) {
            links.get(0).click();
            waitForDownloadAndExtractExcel("C:\\\\users\\\\tfs\\\\54123\\\\CMS");
        } else {
            System.out.println("Download link not found for: " + quarter);
        }
    }

    driver.quit();
}

*******************************************************************


public static void downloadSelectedFiles(String feeSchedule, List<String> quarters) throws Exception {
    WebDriverManager.edgedriver().setup();

    HashMap<String, Object> prefs = new HashMap<>();
    prefs.put("download.default_directory", "C:\\\\users\\\\tfs\\\\54123\\\\CMS");
    prefs.put("profile.default_content_settings.popups", 0);

    EdgeOptions options = new EdgeOptions();
    options.setExperimentalOption("prefs", prefs);

    WebDriver driver = new EdgeDriver(options);
    driver.get("https://www.cms.gov/medicare/payment/fee-for-service-providers/part-b-drugs/average-drug-sales-price");

    // Click ASP Pricing Files
    driver.findElement(By.linkText("ASP Pricing Files")).click();
    Thread.sleep(2000);

    // Track which years have already been expanded
    Set<String> expandedYears = new HashSet<>();

    for (String quarter : quarters) {
        String year = getYearFromQuarter(quarter); // e.g., 2025
        String month = getMonthFromQuarter(quarter); // e.g., July

        // Expand year section only once
        if (!expandedYears.contains(year)) {
            String sectionXPath = "//button[h3[contains(text(), '" + year + " ASP Drug Pricing')]]";
            WebElement yearButton = driver.findElement(By.xpath(sectionXPath));
            if ("false".equals(yearButton.getAttribute("aria-expanded"))) {
                yearButton.click();
                Thread.sleep(2000);
            }
            expandedYears.add(year);
        }

        // Click the download link
        String linkText = month + " " + year + " ASP Pricing File";
        List<WebElement> links = driver.findElements(By.partialLinkText(linkText));
        if (!links.isEmpty()) {
            links.get(0).click();
            waitForDownloadAndExtractExcel("C:\\\\users\\\\tfs\\\\54123\\\\CMS");
        } else {
            System.out.println("Download link not found for: " + quarter);
        }
    }

    driver.quit();
}

***************************************************************

import java.io.*;
import java.nio.file.*;
import java.util.zip.*;
import java.util.stream.Stream;

private static void waitForDownloadAndExtractExcel(String downloadDir) throws Exception {
    Path downloadPath = Paths.get(downloadDir);
    Path latestZip = null;

    // Wait until .crdownload disappears and ZIP file appears
    int retries = 60;
    while (retries-- > 0) {
        try (Stream<Path> files = Files.list(downloadPath)) {
            latestZip = files
                    .filter(path -> path.toString().endsWith(".zip"))
                    .max(Comparator.comparingLong(f -> f.toFile().lastModified()))
                    .orElse(null);

            boolean downloading = Files.list(downloadPath)
                    .anyMatch(f -> f.toString().endsWith(".crdownload"));

            if (latestZip != null && !downloading) {
                break;
            }
        }

        Thread.sleep(1000); // Wait and retry
    }

    if (latestZip == null) throw new RuntimeException("No ZIP file found in download folder");

    // Extract only Excel files from ZIP
    try (ZipInputStream zis = new ZipInputStream(new FileInputStream(latestZip.toFile()))) {
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            if (entry.getName().endsWith(".xls") || entry.getName().endsWith(".xlsx")) {
                Path outFile = downloadPath.resolve(entry.getName());
                try (BufferedOutputStream bos = new BufferedOutputStream(Files.newOutputStream(outFile))) {
                    byte[] buffer = new byte[4096];
                    int len;
                    while ((len = zis.read(buffer)) > 0) {
                        bos.write(buffer, 0, len);
                    }
                }
            }
        }
    }

    // Optionally delete the zip file after extraction
    Files.deleteIfExists(latestZip);
}
****************************************************************

if (!links.isEmpty()) {
    links.get(0).click();
    waitForDownloadAndExtractExcel("C:\\users\\tfs\\54123\\CMS");
}























//button[h3[contains(text(),'2025 ASP Drug Pricing')]]

driver.findElement(By.xpath("//button[h3[contains(text(),'2025 ASP Drug Pricing')]]")).click();

String year = getYearFromQuarter(quarter);  // e.g., "2025"
String sectionXPath = "//button[h3[contains(text(), '" + year + " ASP Drug Pricing')]]";

WebElement yearButton = driver.findElement(By.xpath(sectionXPath));
yearButton.click();
Thread.sleep(2000);


*****************************************************************


String year = getYearFromQuarter(quarter);  // e.g. "2025"
String sectionXPath = "//button[contains(text(), '" + year + " ASP Drug Pricing')]";

// Expand the section
WebElement yearButton = driver.findElement(By.xpath(sectionXPath));
yearButton.click();
Thread.sleep(2000);

// Now find the file link under that year
String month = getMonthFromQuarter(quarter);  // e.g. "July"
String linkText = month + " " + year + " ASP Pricing File";
List<WebElement> links = driver.findElements(By.partialLinkText(linkText));

if (!links.isEmpty()) {
    links.get(0).click();
    Thread.sleep(5000);
}

******************

String month = getMonthFromQuarter(quarter);
String linkText = month + " " + year + " ASP Pricing File";

List<WebElement> links = driver.findElements(By.partialLinkText(linkText));
if (!links.isEmpty()) {
    links.get(0).click(); // Download link
    Thread.sleep(5000);
}

*********************




function checkAndDownload(event) {
    if (event) event.preventDefault(); // Prevent form from submitting

    const selectedQuarters = Array.from(document.querySelectorAll("input[name='quarters']:checked"))
                                  .map(cb => cb.value);
    const selectedFeeSchedule = document.getElementById("feeSchedule").value;
    const storyNumber = document.getElementById("storyNumber").textContent.trim();
    const year = document.getElementById("year").textContent.trim();
    const lob = document.getElementById("lob").textContent.trim();

    fetch('/download_file', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            feeSchedule: selectedFeeSchedule,
            quarters: selectedQuarters,
            storyNumber: storyNumber,
            year: year,
            lob: lob
        })
    })
    .then(res => res.text())
    .then(msg => document.getElementById("status").innerText = msg)
    .catch(err => console.error(err));
}

*************************************

<button type="button" onclick="checkAndDownload(event)">Check and Download File</button>

***************************************





<div class="app-section">
  <h3>File check in State Portal</h3>
  
  <label for="feeSchedule">Select Fee Schedule:</label>
  <select id="feeSchedule" name="feeSchedule">
    <option value="FS1">FS1</option>
    <option value="FS2">FS2</option>
    <!-- Add more fee schedules here -->
  </select>

  <br><br>

  <label>Check Quarters:</label><br>
  <input type="checkbox" name="quarters" value="Q3 2025"> Q3 2025<br>
  <input type="checkbox" name="quarters" value="Q2 2025"> Q2 2025<br>
  <input type="checkbox" name="quarters" value="Q1 2025"> Q1 2025<br>
  <input type="checkbox" name="quarters" value="Q4 2024"> Q4 2024<br>
  <input type="checkbox" name="quarters" value="Q3 2024"> Q3 2024<br>

  <br>
  <button onclick="checkAndDownload()">Check and Download File</button>

  <p id="status"></p>
</div>

<script>
  function checkAndDownload() {
    const selectedQuarters = Array.from(document.querySelectorAll('input[name="quarters"]:checked'))
                                  .map(cb => cb.value);
    const selectedFeeSchedule = document.getElementById('feeSchedule').value;

    fetch('/cms/download-file', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        feeSchedule: selectedFeeSchedule,
        quarters: selectedQuarters
      })
    })
    .then(res => res.text())
    .then(msg => document.getElementById('status').innerText = msg)
    .catch(err => console.error(err));
  }
</script>

************************************************************************

@RestController
@RequestMapping("/cms")
public class CmsFileDownloadController {

    @PostMapping("/download-file")
    public ResponseEntity<String> downloadFile(@RequestBody CmsRequest request) {
        try {
            CmsFileChecker.downloadSelectedFiles(request.getFeeSchedule(), request.getQuarters());
            return ResponseEntity.ok("File(s) checked and downloaded successfully!");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                 .body("Failed: " + e.getMessage());
        }
    }
}

*********************************************************************
public class CmsRequest {
    private String feeSchedule;
    private List<String> quarters;

    // Getters and Setters
}
***************************************************************

public class CmsFileChecker {

   public static void downloadSelectedFiles(String feeSchedule, List<String> quarters) throws Exception {
        // Automatically resolves and sets up EdgeDriver
        WebDriverManager.edgedriver().setup();

        // Set download directory
        HashMap<String, Object> edgePrefs = new HashMap<>();
        edgePrefs.put("download.default_directory", "C:\\users\\tfs\\54123\\CMS");
        edgePrefs.put("profile.default_content_settings.popups", 0);

        EdgeOptions options = new EdgeOptions();
        options.setExperimentalOption("prefs", edgePrefs);

        WebDriver driver = new EdgeDriver(options);
        driver.get("https://www.cms.gov/medicare/payment/fee-for-service-providers/part-b-drugs/average-drug-sales-price");

        driver.findElement(By.linkText("ASP Pricing Files")).click();
        Thread.sleep(2000); // Let the panel load

        for (String quarter : quarters) {
            String year = getYearFromQuarter(quarter);
            String month = getMonthFromQuarter(quarter);
            String sectionXPath = "//button[contains(text(),'" + year + "')]";

            WebElement yearSection = driver.findElement(By.xpath(sectionXPath));
            yearSection.click();
            Thread.sleep(1000);

            String linkText = month + " " + year + " ASP Pricing File";
            List<WebElement> links = driver.findElements(By.partialLinkText(linkText));

            if (!links.isEmpty()) {
                links.get(0).click();
                Thread.sleep(5000); // Wait for file to download
            }
        }

        driver.quit();
    }

    private static String getYearFromQuarter(String q) {
        return q.split(" ")[1];
    }

    private static String getMonthFromQuarter(String q) {
        return switch (q.split(" ")[0]) {
            case "Q1" -> "January";
            case "Q2" -> "April";
            case "Q3" -> "July";
            case "Q4" -> "October";
            default -> "";
        };
    }
}
