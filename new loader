/* If the element has the hidden attribute, never render it */
.loading-overlay[hidden] { display: none !important; }


***********************************************

<!-- keep hidden at rest -->
<div id="loading-overlay" class="loading-overlay" hidden aria-hidden="true">
  <div class="newloader">
    <div class="loaderBox1"></div>
    <div class="loaderBox2"></div>
  </div>
  <div class="loading-caption">Running validationâ€¦</div>
</div>


********************************************

document.addEventListener('DOMContentLoaded', () => {
  const runBtn  = document.getElementById('runValidationBtn');
  const overlay = document.getElementById('loading-overlay');
  const form    = document.querySelector('#yourModalFormId'); // optional

  async function runValidation() {
    if (runBtn.disabled) return;
    runBtn.disabled = true;
    runBtn.dataset.prevText = runBtn.textContent;
    runBtn.textContent = 'Runningâ€¦';
    runBtn.setAttribute('aria-busy', 'true');

    overlay.hidden = false;                 // SHOW
    document.body.classList.add('is-loading');

    try {
      const res = await fetch('/runValidation', { method:'POST'/*...*/ });
      if (!res.ok) throw new Error('Validation failed');
      // success handling...
    } catch (e) {
      console.error(e);
      // error toast...
    } finally {
      overlay.hidden = true;                // HIDE
      document.body.classList.remove('is-loading');
      runBtn.disabled = false;
      runBtn.removeAttribute('aria-busy');
      runBtn.textContent = runBtn.dataset.prevText || 'Run Validation';
    }
  }

  runBtn?.addEventListener('click', runValidation);
  form?.addEventListener('submit', (e) => { e.preventDefault(); runValidation(); });
});

*************************************

/* ðŸ”‘ Ensure overlay truly disappears when hidden */
.loading-overlay[hidden] {
  display: none !important;
}


**************************************

.loading-overlay {
  position: fixed;
  inset: 0;
  display: flex;                 /* only active when NOT hidden */
  align-items: center;
  justify-content: center;
  flex-direction: column;
  gap: 12px;
  background: rgba(0,0,0,0.25);
  z-index: 5000;
}

.newloader {
  width: 56px;
  height: 56px;
  position: relative;
}

.newloader > div {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 3px solid currentColor;
  border-radius: 8px;
  animation: rotate 1.1s linear infinite;
}

.loaderBox2 { animation-direction: reverse; }

@keyframes rotate {
  from { transform: rotate(0deg); }
  to   { transform: rotate(360deg); }
}
