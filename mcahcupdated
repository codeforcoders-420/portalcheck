import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

public class MCAHCScrubber {

    public static void main(String[] args) {
        String inputFolderPath = "input";   // Folder containing input file
        String outputFolderPath = "output"; // Folder to write output files

        File folder = new File(inputFolderPath);
        File[] files = folder.listFiles((dir, name) -> name.endsWith(".xlsx"));

        if (files == null || files.length == 0) {
            System.out.println("No Excel files found in input folder.");
            return;
        }

        for (File inputFile : files) {
            try (FileInputStream fis = new FileInputStream(inputFile);
                 Workbook workbook = new XSSFWorkbook(fis)) {

                Sheet sheet = workbook.getSheetAt(0);
                int headerRowIndex = findHeaderRow(sheet);
                if (headerRowIndex == -1) {
                    System.out.println("Header row not found in: " + inputFile.getName());
                    continue;
                }

                // Logic 1: Default MCAHC logic (excluding under 21, M/NA/$0)
                List<List<String>> filteredData1 = processSheet(sheet, headerRowIndex, false, false);
                writeFilteredDataToExcel(filteredData1, outputFolderPath, "MI MD MCAHC");

                // Logic 2: MAN logic (Rate = M only, export as 0.0100)
                List<List<String>> filteredData2 = processSheet(sheet, headerRowIndex, true, false);
                writeFilteredDataToExcel(filteredData2, outputFolderPath, "MI MD MCAHC MAN");

                System.out.println("Filtered data saved from: " + inputFile.getName());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private static int findHeaderRow(Sheet sheet) {
        for (Row row : sheet) {
            for (Cell cell : row) {
                if (getCellValue(cell).equalsIgnoreCase("Code")) {
                    return row.getRowNum();
                }
            }
        }
        return -1;
    }

    private static List<List<String>> processSheet(Sheet sheet, int headerRowIndex, boolean isManMode, boolean debug) {
        List<List<String>> filteredRows = new ArrayList<>();
        Row headerRow = sheet.getRow(headerRowIndex);

        Map<String, Integer> colIndex = new HashMap<>();
        for (Cell cell : headerRow) {
            colIndex.put(getCellValue(cell), cell.getColumnIndex());
        }

        for (int i = headerRowIndex + 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            String code = getCellValue(row.getCell(colIndex.getOrDefault("Code", -1)));
            String modifier = getCellValue(row.getCell(colIndex.getOrDefault("Modifier", -1)));
            String ageRange = getCellValue(row.getCell(colIndex.getOrDefault("Age Range", -1)));
            String rate = getCellValue(row.getCell(colIndex.getOrDefault("Rate", -1)));
            String effDate = getCellValue(row.getCell(colIndex.getOrDefault("Effective Date**", -1)));

            // Apply filtering based on mode
            if (isManMode) {
                if (!"M".equalsIgnoreCase(rate)) continue;
                rate = "0.0100";
            } else {
                if (rate == null || rate.equalsIgnoreCase("M") || rate.equalsIgnoreCase("NA") || rate.equalsIgnoreCase("$0")) continue;
                if (!shouldIncludeAgeRange(ageRange)) continue;
            }

            filteredRows.add(Arrays.asList(code, modifier, ageRange, rateFormatted(rate), effDate));
        }
        return filteredRows;
    }

    private static boolean shouldIncludeAgeRange(String ageRange) {
        if (ageRange == null || ageRange.isBlank()) return true;
        List<Integer> nums = new ArrayList<>();
        for (String word : ageRange.split(" ")) {
            try {
                nums.add(Integer.parseInt(word));
            } catch (NumberFormatException ignored) {}
        }
        if (nums.isEmpty()) return false;
        int min = nums.get(0);
        return min >= 21;
    }

    private static String rateFormatted(String rate) {
        try {
            double val = Double.parseDouble(rate.replace("$", ""));
            return String.format("%.4f", val);
        } catch (Exception e) {
            return rate;
        }
    }

    private static void writeFilteredDataToExcel(List<List<String>> data, String folder, String filename) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Filtered Data");
        int rowIndex = 0;

        Row header = sheet.createRow(rowIndex++);
        String[] headers = {"Code", "Modifier", "Age Range", "Rate", "Effective Date"};
        for (int i = 0; i < headers.length; i++) {
            header.createCell(i).setCellValue(headers[i]);
        }

        for (List<String> rowData : data) {
            Row row = sheet.createRow(rowIndex++);
            for (int i = 0; i < rowData.size(); i++) {
                row.createCell(i).setCellValue(rowData.get(i));
            }
        }

        File outFile = new File(folder, filename + ".xlsx");
        try (FileOutputStream fos = new FileOutputStream(outFile)) {
            workbook.write(fos);
        }
        workbook.close();
    }

    private static String getCellValue(Cell cell) {
        if (cell == null) return "";
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue();
            case NUMERIC -> String.valueOf(cell.getNumericCellValue());
            case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
            case FORMULA -> cell.getCellFormula();
            default -> "";
        };
    }
}
