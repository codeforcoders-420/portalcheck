import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

public class MCAHCScrubber {

    public static void main(String[] args) {
        String inputFolder = "C:/your_path/Input/";
        String outputFolder = "C:/your_path/Output/";

        File[] files = new File(inputFolder).listFiles((dir, name) -> name.endsWith(".xlsx") || name.endsWith(".xls"));
        if (files == null || files.length == 0) {
            System.out.println("No input files found.");
            return;
        }

        for (File file : files) {
            try (FileInputStream fis = new FileInputStream(file);
                 Workbook workbook = new XSSFWorkbook(fis)) {

                Sheet sheet = workbook.getSheetAt(0);
                int headerRowIndex = findHeaderRow(sheet);
                if (headerRowIndex == -1) {
                    System.out.println("Header not found in file: " + file.getName());
                    continue;
                }

                if (file.getName().contains("MCAHC MAN")) {
                    List<List<String>> filtered = processFile2(sheet, headerRowIndex);
                    writeFilteredDataToExcel(filtered, outputFolder + "MI_MD_MCAHC_MAN_Output.xlsx");
                } else {
                    List<List<String>> filtered = processFile1(sheet, headerRowIndex);
                    writeFilteredDataToExcel(filtered, outputFolder + "MI_MD_MCAHC_U21_Output.xlsx");
                }

                System.out.println("Processed: " + file.getName());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // ------------------ FILE 1 -----------------------
    private static List<List<String>> processFile1(Sheet sheet, int headerRowIndex) {
        List<List<String>> filteredRows = new ArrayList<>();
        filteredRows.add(Arrays.asList("Code", "Modifier", "Age Range", "Rate", "Effective Date"));

        for (int i = headerRowIndex + 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            String code = getFormattedCellValue(row.getCell(0), true);
            String modifier = getFormattedCellValue(row.getCell(1), false);
            String ageRange = getFormattedCellValue(row.getCell(2), false);
            String rate = getFormattedCellValue(row.getCell(3), false);
            String effDate = getFormattedCellValue(row.getCell(4), false);

            if (shouldIncludeRow(rate, ageRange)) {
                String formattedRate = formatRate(rate);
                filteredRows.add(Arrays.asList(code, modifier, ageRange, formattedRate, effDate));
            }
        }

        return filteredRows;
    }

    private static boolean shouldIncludeRow(String rateStr, String ageRange) {
        if (rateStr == null) return false;
        rateStr = rateStr.trim();

        if (rateStr.equalsIgnoreCase("M") ||
            rateStr.equalsIgnoreCase("$0") ||
            rateStr.equalsIgnoreCase("$0.00") ||
            rateStr.equalsIgnoreCase("0") ||
            rateStr.equalsIgnoreCase("0.0000")) return false;

        if (ageRange == null || ageRange.isBlank()) return true;

        return !isUnder21(ageRange);
    }

    // ------------------ FILE 2 -----------------------
    private static List<List<String>> processFile2(Sheet sheet, int headerRowIndex) {
        List<List<String>> filteredRows = new ArrayList<>();
        filteredRows.add(Arrays.asList("Code", "Modifier", "Age Range", "Rate", "Effective Date"));

        for (int i = headerRowIndex + 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            String code = getFormattedCellValue(row.getCell(0), true);
            String modifier = getFormattedCellValue(row.getCell(1), false);
            String ageRange = getFormattedCellValue(row.getCell(2), false);
            String rate = getFormattedCellValue(row.getCell(3), false);
            String effDate = getFormattedCellValue(row.getCell(4), false);

            if (rate.equalsIgnoreCase("M")) {
                filteredRows.add(Arrays.asList(code, modifier, ageRange, "0.0100", effDate));
            }
        }

        return filteredRows;
    }

    // ------------------ UTILITIES -----------------------

    private static boolean isUnder21(String ageRange) {
        try {
            String[] parts = ageRange.split(" ");
            for (String part : parts) {
                try {
                    int age = Integer.parseInt(part);
                    if (age < 21) return true;
                } catch (NumberFormatException ignored) {}
            }
        } catch (Exception e) {
            return true;
        }
        return false;
    }

    private static String formatRate(String rateStr) {
        try {
            double rate = Double.parseDouble(rateStr.replace("$", "").trim());
            return new DecimalFormat("0.0000").format(rate);
        } catch (NumberFormatException e) {
            return rateStr;
        }
    }

    private static String getFormattedCellValue(Cell cell, boolean isCodeColumn) {
        if (cell == null) return "";
        DataFormatter formatter = new DataFormatter();
        String value = formatter.formatCellValue(cell);

        if (isCodeColumn && value.matches("\\d+\\.0")) {
            value = value.substring(0, value.indexOf('.'));
        }
        return value.trim();
    }

    private static int findHeaderRow(Sheet sheet) {
        for (int i = 0; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            for (Cell cell : row) {
                String val = cell.getStringCellValue().trim().toLowerCase();
                if (val.contains("code") && val.contains("rate")) return i;
            }
        }
        return -1;
    }

    private static void writeFilteredDataToExcel(List<List<String>> data, String filePath) {
        try (Workbook wb = new XSSFWorkbook()) {
            Sheet sheet = wb.createSheet("Output");

            for (int r = 0; r < data.size(); r++) {
                Row row = sheet.createRow(r);
                List<String> rowData = data.get(r);
                for (int c = 0; c < rowData.size(); c++) {
                    Cell cell = row.createCell(c);
                    cell.setCellValue(rowData.get(c));
                }
            }

            try (FileOutputStream out = new FileOutputStream(filePath)) {
                wb.write(out);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
