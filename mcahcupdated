import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

public class MCAHCScrubber {

    private static final List<String> TARGET_HEADERS = Arrays.asList("Code", "Modifier", "Age Range", "Rate", "Effective Date");

    public static void main(String[] args) {
        String inputFolder = "Input/";
        String outputFolder = "Output/";

        File folder = new File(inputFolder);
        File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".xlsx"));

        if (files == null || files.length == 0) {
            System.out.println("No Excel files found in input folder.");
            return;
        }

        for (File file : files) {
            try (FileInputStream fis = new FileInputStream(file);
                 Workbook workbook = new XSSFWorkbook(fis)) {

                Sheet sheet = workbook.getSheetAt(0);
                int headerRowIndex = findHeaderRow(sheet);
                if (headerRowIndex == -1) {
                    System.out.println("Header row not found in: " + file.getName());
                    continue;
                }

                // Process for File 1
                List<List<String>> result1 = processFile1(sheet, headerRowIndex);
                writeToExcel(result1, outputFolder + file.getName().replace(".xlsx", "_Filtered1.xlsx"));

                // Process for File 2
                List<List<String>> result2 = processFile2(sheet, headerRowIndex);
                writeToExcel(result2, outputFolder + file.getName().replace(".xlsx", "_Filtered2.xlsx"));

                System.out.println("Processed: " + file.getName());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private static int findHeaderRow(Sheet sheet) {
        for (int i = 0; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            int match = 0;
            for (Cell cell : row) {
                String value = getCellValue(cell);
                if (TARGET_HEADERS.contains(value)) match++;
            }
            if (match >= 3) return i; // match threshold
        }
        return -1;
    }

    private static Map<String, Integer> mapColumns(Row header) {
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < header.getLastCellNum(); i++) {
            String key = getCellValue(header.getCell(i));
            if (TARGET_HEADERS.contains(key)) {
                map.put(key, i);
            }
        }
        return map;
    }

    private static List<List<String>> processFile1(Sheet sheet, int headerIndex) {
        List<List<String>> result = new ArrayList<>();
        Row header = sheet.getRow(headerIndex);
        Map<String, Integer> colMap = mapColumns(header);
        result.add(new ArrayList<>(TARGET_HEADERS));

        for (int i = headerIndex + 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            String ageRange = getCellValue(row.getCell(colMap.get("Age Range")));
            String rateVal = getCellValue(row.getCell(colMap.get("Rate"))).replace("$", "").trim();

            // Scrub if rate is 0
            if (rateVal.equalsIgnoreCase("0.0000") || rateVal.equalsIgnoreCase("0") || rateVal.equalsIgnoreCase("$0")) continue;

            if (ageRange == null || ageRange.trim().isEmpty() || !isUnder21(ageRange)) {
                result.add(extractRow(row, colMap, false));
            }
        }

        return result;
    }

    private static List<List<String>> processFile2(Sheet sheet, int headerIndex) {
        List<List<String>> result = new ArrayList<>();
        Row header = sheet.getRow(headerIndex);
        Map<String, Integer> colMap = mapColumns(header);
        result.add(new ArrayList<>(TARGET_HEADERS));

        for (int i = headerIndex + 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            String rateVal = getCellValue(row.getCell(colMap.get("Rate"))).trim();
            if (rateVal.equalsIgnoreCase("M")) {
                List<String> rowData = extractRow(row, colMap, true);
                if (!rowData.get(3).equals("0.0000")) {
                    result.add(rowData);
                }
            }
        }

        return result;
    }

    private static boolean isUnder21(String ageRange) {
        try {
            if (ageRange.toLowerCase().contains("to")) {
                String[] parts = ageRange.split("to");
                int lower = Integer.parseInt(parts[0].trim());
                return lower < 21;
            }
        } catch (Exception e) {
            return false;
        }
        return false;
    }

    private static List<String> extractRow(Row row, Map<String, Integer> colMap, boolean isManualRate) {
        List<String> rowData = new ArrayList<>();
        DecimalFormat rateFormat = new DecimalFormat("0.0000");

        for (String header : TARGET_HEADERS) {
            Cell cell = row.getCell(colMap.get(header));
            String value = getCellValue(cell);

            if (header.equals("Rate")) {
                if (isManualRate) {
                    value = rateFormat.format(0.0100);
                } else {
                    try {
                        double d = Double.parseDouble(value.replace("$", "").trim());
                        value = rateFormat.format(d);
                    } catch (Exception e) {
                        value = value;
                    }
                }
            }

            if (header.equals("Code") && value.endsWith(".0")) {
                value = value.replace(".0", "");
            }

            rowData.add(value);
        }

        return rowData;
    }

    private static void writeToExcel(List<List<String>> data, String filePath) {
        try (Workbook wb = new XSSFWorkbook(); FileOutputStream fos = new FileOutputStream(filePath)) {
            Sheet sheet = wb.createSheet("Output");
            for (int i = 0; i < data.size(); i++) {
                Row row = sheet.createRow(i);
                List<String> line = data.get(i);
                for (int j = 0; j < line.size(); j++) {
                    Cell cell = row.createCell(j);
                    cell.setCellValue(line.get(j));
                }
            }
            wb.write(fos);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String getCellValue(Cell cell) {
        if (cell == null) return "";
        switch (cell.getCellType()) {
            case STRING: return cell.getStringCellValue().trim();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) return cell.getDateCellValue().toString();
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN: return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                try {
                    return String.valueOf(cell.getNumericCellValue());
                } catch (Exception e) {
                    return cell.getCellFormula();
                }
            default: return "";
        }
    }
}
