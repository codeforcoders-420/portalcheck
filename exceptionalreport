:root {
  --bg: #f5f7fb;
  --card: #ffffff;
  --text: #0f172a;
  --muted: #6b7280;
  --accent: #2563eb;
  --accent-pressed: #1d4ed8;
  --overlay: rgba(15, 23, 42, 0.45);
  --radius: 16px;
  --shadow: 0 10px 30px rgba(2, 6, 23, 0.15);
}

/* Buttons */
.btn {
  display: inline-flex; align-items: center; justify-content: center; gap: 8px;
  padding: 12px 18px; border-radius: 12px; border: 0; cursor: pointer;
  background: var(--accent); color: #fff; font-weight: 700; letter-spacing: .3px;
  transition: transform .04s ease, background .2s ease, box-shadow .2s ease;
  box-shadow: 0 6px 16px rgba(37, 99, 235, 0.35);
}
.btn:hover { background: var(--accent-pressed); }
.btn:active { transform: translateY(1px); box-shadow: 0 4px 12px rgba(37,99,235,.3); }
.btn.secondary { background: #e5e7eb; color: #111827; box-shadow: none; }
.btn.secondary:hover { background: #d1d5db; }

/* Modal */
.modal-overlay {
  position: fixed; inset: 0; background: var(--overlay);
  display: none; align-items: center; justify-content: center; z-index: 1000;
  padding: 24px;
}
.modal-overlay[aria-hidden="false"] { display: flex; }

.modal {
  width: 100%; max-width: 520px; background: var(--card); border-radius: 18px;
  box-shadow: var(--shadow); position: relative; padding: 24px 24px 20px;
}
.modal header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px; }
.modal h3 { margin: 0; font-size: 22px; }
.close-x { background: transparent; border: 0; font-size: 22px; line-height: 1; cursor: pointer; color: var(--muted); }

.field { display: grid; gap: 8px; margin: 14px 0 6px; }
label { font-weight: 600; }
select {
  width: 100%; padding: 12px 14px; font-size: 16px; border-radius: 12px;
  border: 1px solid #e5e7eb; background: #f9fafb;
}

.row { display: flex; gap: 12px; justify-content: flex-end; margin-top: 18px; }

.toast {
  position: fixed; bottom: 16px; left: 50%; transform: translateX(-50%);
  background: #10b981; color: white; padding: 10px 14px; border-radius: 999px;
  display:none; box-shadow: var(--shadow); z-index: 1100;
}


*****************************************************************

<button class="btn" id="openPeer">Open</button>


*********************************************************************

<!-- Launch Modal -->
<div class="modal-overlay" id="launchModal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="modalTitle">
  <div class="modal" role="document">
    <header>
      <h3 id="modalTitle">Launch Validation</h3>
      <button class="close-x" id="closeModal" aria-label="Close">×</button>
    </header>

    <form id="launchForm">
      <div class="field">
        <label for="env">Select Environment</label>
        <select id="env" name="environment" required>
          <option value="" selected disabled>Choose…</option>
          <option value="SIT">SIT</option>
          <option value="UAT">UAT</option>
          <option value="PROD">PROD</option>
        </select>
      </div>

      <div class="row">
        <button type="button" class="btn secondary" id="cancelBtn">Cancel</button>
        <button type="submit" id="runBtn" class="btn" disabled>Run Validation</button>
      </div>
    </form>
  </div>
</div>

<div class="toast" id="toast">Validation started…</div>

****************************************************************

<script>
  const openBtn = document.getElementById('openPeer');
  const modal = document.getElementById('launchModal');
  const closeBtn = document.getElementById('closeModal');
  const cancelBtn = document.getElementById('cancelBtn');
  const envSelect = document.getElementById('env');
  const runBtn = document.getElementById('runBtn');
  const form = document.getElementById('launchForm');
  const toast = document.getElementById('toast');

  function openModal(){ modal.setAttribute('aria-hidden','false'); setTimeout(()=>envSelect.focus(),0); document.addEventListener('keydown', esc); }
  function closeModal(){ modal.setAttribute('aria-hidden','true'); document.removeEventListener('keydown', esc); }
  function esc(e){ if(e.key==='Escape') closeModal(); }

  if (openBtn) openBtn.addEventListener('click', openModal);
  closeBtn.addEventListener('click', closeModal);
  cancelBtn.addEventListener('click', closeModal);
  modal.addEventListener('click', (e)=>{ if(e.target===modal) closeModal(); });

  envSelect.addEventListener('change', ()=>{ runBtn.disabled = !envSelect.value; });

  form.addEventListener('submit', async (e)=>{
    e.preventDefault();
    runBtn.disabled = true;
    const payload = { environment: envSelect.value };

    try {
      const res = await fetch('/peer-review/run', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      showToast('Validation started for ' + payload.environment);
    } catch(err){
      showToast('Failed to start: ' + err.message);
    } finally {
      closeModal();
      runBtn.disabled = false;
    }
  });

  function showToast(msg){
    toast.textContent = msg;
    toast.style.display = 'block';
    setTimeout(()=> toast.style.display='none', 2200);
  }
</script>


****************************************************************

<button class="individualtools-button" id="openPeerBtn" type="button">Open</button>



<!-- Peer Review Launch Modal -->
<div class="pr-overlay" id="prOverlay" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="prModalTitle">
  <div class="pr-modal" role="document">
    <header class="pr-modal-header">
      <h3 id="prModalTitle">Launch Validation</h3>
      <button class="pr-close" id="prCloseBtn" aria-label="Close">×</button>
    </header>

    <form id="prLaunchForm">
      <div class="pr-field">
        <label for="prEnv">Select Environment</label>
        <select id="prEnv" name="environment" required>
          <option value="" selected disabled>Choose…</option>
          <option value="SIT">SIT</option>
          <option value="UAT">UAT</option>
          <option value="PROD">PROD</option>
        </select>
      </div>

      <div class="pr-row">
        <button type="button" class="pr-btn pr-secondary" id="prCancelBtn">Cancel</button>
        <button type="submit" class="pr-btn" id="prRunBtn" disabled>Run Validation</button>
      </div>
    </form>
  </div>
</div>

<div class="pr-toast" id="prToast">Validation started…</div>

<script>
  // Grab elements
  const prOpenBtn  = document.getElementById('openPeerBtn');
  const prOverlay  = document.getElementById('prOverlay');
  const prCloseBtn = document.getElementById('prCloseBtn');
  const prCancel   = document.getElementById('prCancelBtn');
  const prEnv      = document.getElementById('prEnv');
  const prRunBtn   = document.getElementById('prRunBtn');
  const prForm     = document.getElementById('prLaunchForm');
  const prToast    = document.getElementById('prToast');

  // IMPORTANT: toggle aria-hidden (don’t use style.display)
  function prOpen()  { prOverlay.setAttribute('aria-hidden','false'); setTimeout(()=>prEnv.focus(),0); document.addEventListener('keydown', prEsc); }
  function prClose() { prOverlay.setAttribute('aria-hidden','true');  document.removeEventListener('keydown', prEsc); }
  function prEsc(e){ if(e.key === 'Escape') prClose(); }

  prOpenBtn?.addEventListener('click', prOpen);
  prCloseBtn.addEventListener('click', prClose);
  prCancel.addEventListener('click', prClose);
  prOverlay.addEventListener('click', (e)=>{ if(e.target === prOverlay) prClose(); });

  prEnv.addEventListener('change', ()=>{ prRunBtn.disabled = !prEnv.value; });

  prForm.addEventListener('submit', async (e)=>{
    e.preventDefault();
    prRunBtn.disabled = true;
    const payload = { environment: prEnv.value };
    try {
      await fetch('/peer-review/run', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      prToast.textContent = 'Validation started for ' + payload.environment;
    } catch (err) {
      prToast.textContent = 'Failed to start: ' + err.message;
    } finally {
      prToast.style.display = 'block';
      setTimeout(()=> prToast.style.display = 'none', 2200);
      prClose();
      prRunBtn.disabled = false;
    }
  });
</script>




/* Overlay */
.pr-overlay {
  position: fixed; inset: 0; background: rgba(15,23,42,.45);
  display: none; align-items: center; justify-content: center;
  z-index: 2000; padding: 24px;
}
.pr-overlay[aria-hidden="false"] { display: flex; }

/* Modal card */
.pr-modal {
  width: 100%; max-width: 520px; background: #fff; border-radius: 18px;
  box-shadow: 0 10px 30px rgba(2,6,23,.15);
  padding: 24px 24px 20px; position: relative;
}
.pr-modal-header { display:flex; align-items:center; justify-content:space-between; margin-bottom: 12px; }
.pr-close { background: none; border: 0; font-size: 22px; cursor: pointer; color: #6b7280; }

/* Fields */
.pr-field { display: grid; gap: 8px; margin: 14px 0 6px; }
.pr-field label { font-weight: 600; }
.pr-field select {
  width: 100%; padding: 12px 14px; font-size: 16px; border-radius: 12px;
  border: 1px solid #e5e7eb; background: #f9fafb;
}

/* Buttons */
.pr-row { display: flex; gap: 12px; justify-content: flex-end; margin-top: 18px; }
.pr-btn {
  display:inline-flex; align-items:center; justify-content:center; gap:8px;
  padding:12px 18px; border-radius:12px; border:0; cursor:pointer;
  background:#2563eb; color:#fff; font-weight:700; letter-spacing:.3px;
  box-shadow:0 6px 16px rgba(37,99,235,.35); transition: transform .04s, background .2s;
}
.pr-btn:hover{ background:#1d4ed8; }
.pr-btn:active{ transform: translateY(1px); }
.pr-secondary{ background:#e5e7eb; color:#111827; box-shadow:none; }
.pr-secondary:hover{ background:#d1d5db; }

/* Toast */
.pr-toast {
  position: fixed; bottom: 16px; left: 50%; transform: translateX(-50%);
  background: #10b981; color: white; padding: 10px 14px; border-radius: 999px;
  display: none; box-shadow: 0 10px 30px rgba(2,6,23,.15); z-index: 2100;
}



********************************************************************
